/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/x1KnphdI7BB
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { IBM_Plex_Sans } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useEffect, useState } from "react";

interface PokemonData {
  name: string;
  types: { type: { name: string } }[];
  height: number;
  weight: number;
  abilities: { ability: { name: string } }[];
  base_experience: number;
  sprites: {
    front_default: string;
  };
}

export function Pokemon() {
  const [pokemonList, setPokemonList] = useState<PokemonData[]>([]);

  useEffect(() => {
    const fetchPokemon = async () => {
      try {
        const response = await fetch(
          "https://pokeapi.co/api/v2/pokemon?limit=4"
        );
        const data = await response.json();
        const results = await Promise.all(
          data.results.map(async (pokemon: { url: string }) => {
            const res = await fetch(pokemon.url);
            return res.json();
          })
        );
        setPokemonList(results);
      } catch (error) {
        console.error("ポケモンデータの取得に失敗しました:", error);
      }
    };

    fetchPokemon();
  }, []);

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <nav className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href="#" className="text-xl font-bold" prefetch={false}>
              Pokédex
            </Link>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="sm">
                <FlameIcon className="w-5 h-5" />
                Fire
              </Button>
              <Button variant="ghost" size="sm">
                <GlassWaterIcon className="w-5 h-5" />
                Water
              </Button>
              <Button variant="ghost" size="sm">
                <LeafIcon className="w-5 h-5" />
                Grass
              </Button>
              <Button variant="ghost" size="sm">
                <BoltIcon className="w-5 h-5" />
                Electric
              </Button>
              <Button variant="ghost" size="sm">
                <BugIcon className="w-5 h-5" />
                Bug
              </Button>
            </div>
          </div>
          <div>
            <Input
              placeholder="Search Pokémon..."
              className="bg-primary-foreground/10 text-primary-foreground placeholder:text-primary-foreground/50 px-3 py-2 rounded-lg w-64"
            />
          </div>
        </nav>
      </header>
      <main className="flex-1 bg-muted/10 py-8">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 px-6">
          {pokemonList.map((pokemon) => (
            <div
              key={pokemon.name}
              className="bg-background rounded-lg shadow-lg overflow-hidden"
            >
              <img
                src={pokemon.sprites.front_default}
                alt={pokemon.name}
                width={300}
                height={300}
                className="w-full h-48 object-cover"
                style={{ aspectRatio: "300/300", objectFit: "cover" }}
              />
              <div className="p-4">
                <h3 className="text-xl font-bold">{pokemon.name}</h3>
                <div className="flex items-center gap-2 mt-2">
                  {pokemon.types.map((type) => (
                    <div
                      key={type.type.name}
                      className="bg-primary rounded-full px-3 py-1 text-primary-foreground text-sm font-medium"
                    >
                      {type.type.name}
                    </div>
                  ))}
                </div>
                <div className="mt-4 grid grid-cols-2 gap-2">
                  <div className="bg-muted/20 rounded-lg px-3 py-2 text-sm">
                    <div className="font-medium">Height</div>
                    <div>{pokemon.height / 10} m</div>
                  </div>
                  <div className="bg-muted/20 rounded-lg px-3 py-2 text-sm">
                    <div className="font-medium">Weight</div>
                    <div>{pokemon.weight / 10} kg</div>
                  </div>
                  <div className="bg-muted/20 rounded-lg px-3 py-2 text-sm">
                    <div className="font-medium">Abilities</div>
                    <div>
                      {pokemon.abilities.map((a) => a.ability.name).join(", ")}
                    </div>
                  </div>
                  <div className="bg-muted/20 rounded-lg px-3 py-2 text-sm">
                    <div className="font-medium">Base Exp.</div>
                    <div>{pokemon.base_experience}</div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}

function BoltIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" />
      <circle cx="12" cy="12" r="4" />
    </svg>
  );
}

function BugIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 2 1.88 1.88" />
      <path d="M14.12 3.88 16 2" />
      <path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1" />
      <path d="M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6" />
      <path d="M12 20v-9" />
      <path d="M6.53 9C4.6 8.8 3 7.1 3 5" />
      <path d="M6 13H2" />
      <path d="M3 21c0-2.1 1.7-3.9 3.8-4" />
      <path d="M20.97 5c0 2.1-1.6 3.8-3.5 4" />
      <path d="M22 13h-4" />
      <path d="M17.2 17c2.1.1 3.8 1.9 3.8 4" />
    </svg>
  );
}

function FlameIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z" />
    </svg>
  );
}

function GlassWaterIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15.2 22H8.8a2 2 0 0 1-2-1.79L5 3h14l-1.81 17.21A2 2 0 0 1 15.2 22Z" />
      <path d="M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0" />
    </svg>
  );
}

function LeafIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z" />
      <path d="M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12" />
    </svg>
  );
}
